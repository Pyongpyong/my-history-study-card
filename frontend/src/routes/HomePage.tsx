import { useState, useEffect, useMemo } from 'react';
import { buildTeacherFilename, getTeacherAssetUrl, getHelperAssetUrl, getCardDeckImageUrl } from '../utils/assets';
import CardRunner from '../components/CardRunner';
import { fetchLearningHelpers, fetchDefaultCardStyle, type LearningHelperPublic, type CardStyle } from '../api';
import { useAuth } from '../context/AuthContext';

interface SampleCardConfig {
  card: any;
  correct: boolean;
  explanation?: string;
}

const sampleCards: SampleCardConfig[] = [
  {
    card: {
      type: 'MCQ',
      question: 'Í≥†Íµ¨Î†§Î•º Í±¥Íµ≠Ìïú Ïù∏Î¨ºÏùÄ ÎàÑÍµ¨Ïù∏Í∞Ä?',
      options: ['Ï£ºÎ™Ω', 'Ïò®Ï°∞', 'Î∞ïÌòÅÍ±∞ÏÑ∏', 'ÍπÄÏàòÎ°ú'],
      answer_index: 0,
    },
    correct: true,
    explanation: 'Ï£ºÎ™ΩÏù¥ Ï°∏Î≥∏ÏóêÏÑú Í≥†Íµ¨Î†§Î•º ÏÑ∏Ïõå ÌïúÍ∞ï Ïù¥Î∂ÅÏùÑ Ïû•ÏïÖÌñàÏäµÎãàÎã§.',
  },
  {
    card: {
      type: 'SHORT',
      prompt: 'Ï°∞ÏÑ† Ï†ÑÍ∏∞ Í≥ºÍ±∞Ï†úÎèÑÏùò ÏµúÍ≥† ÏãúÌóòÏùÄ?',
      answer: 'ÎåÄÍ≥º(Î¨∏Í≥º)',
      rubric: { aliases: ['ÎåÄÍ≥º', 'Î¨∏Í≥º'] },
    },
    correct: true,
    explanation: 'Ï°∞ÏÑ† ÏãúÎåÄ Í≥ºÍ±∞ ÏãúÌóò Í∞ÄÏö¥Îç∞ Î¨∏Í¥ÄÏùÑ ÏÑ†Î∞úÌïòÎäî ÏµúÍ≥† ÏãúÌóòÏù¥ ÎåÄÍ≥º(Î¨∏Í≥º)ÏòÄÏäµÎãàÎã§.',
  },
  {
    card: {
      type: 'OX',
      statement: 'ÏÑ∏Ï¢ÖÎåÄÏôïÏù¥ ÌõàÎØºÏ†ïÏùåÏùÑ Ï∞ΩÏ†úÌñàÎã§.',
      answer: true,
    },
    correct: true,
    explanation: 'ÏÑ∏Ï¢ÖÎåÄÏôïÏùÄ ÌõàÎØºÏ†ïÏùåÏùÑ Ï∞ΩÏ†úÌï¥ Î∞òÌè¨ÌñàÏäµÎãàÎã§.',
  },
  {
    card: {
      type: 'CLOZE',
      text: '1392ÎÖÑ {{c1}}Í∞Ä Ï°∞ÏÑ†ÏùÑ Í±¥Íµ≠ÌïòÏòÄÎã§.',
      clozes: { c1: 'Ïù¥ÏÑ±Í≥Ñ' },
    },
    correct: true,
    explanation: '1392ÎÖÑ Ïù¥ÏÑ±Í≥ÑÍ∞Ä Ï°∞ÏÑ†ÏùÑ Í±¥Íµ≠ÌïòÎ©¥ÏÑú Í≥†Î†§Î•º Í≥ÑÏäπÌñàÏäµÎãàÎã§.',
  },
  {
    card: {
      type: 'ORDER',
      items: ['Í≥†Íµ¨Î†§ Í±¥Íµ≠', 'Î∞±Ï†ú Í±¥Íµ≠', 'Ïã†Îùº Í±¥Íµ≠', 'Í∞ÄÏïº Í±¥Íµ≠'],
      answer_order: [0, 1, 2, 3],
    },
    correct: true,
    explanation: 'ÏÇºÍµ≠Í≥º Í∞ÄÏïºÏùò Í±¥Íµ≠ ÏàúÏÑúÎäî Í≥†Íµ¨Î†§ ‚Üí Î∞±Ï†ú ‚Üí Ïã†Îùº ‚Üí Í∞ÄÏïºÏûÖÎãàÎã§.',
  },
  {
    card: {
      type: 'MATCH',
      left: ['ÏÑ∏Ï¢ÖÎåÄÏôï', 'Ïù¥ÏàúÏã†', 'Ïû•Î≥¥Í≥†'],
      right: ['ÌõàÎØºÏ†ïÏùå', 'Í±∞Î∂ÅÏÑ†', 'Ï≤≠Ìï¥ÏßÑ'],
      pairs: [
        [0, 0],
        [1, 1],
        [2, 2],
      ],
    },
    correct: true,
    explanation: 'ÏÑ∏Ï¢ÖÎåÄÏôï-ÌõàÎØºÏ†ïÏùå, Ïù¥ÏàúÏã†-Í±∞Î∂ÅÏÑ†, Ïû•Î≥¥Í≥†-Ï≤≠Ìï¥ÏßÑÏù¥ ÎåÄÌëúÏ†ÅÏù∏ Ïó∞Í≤∞ÏûÖÎãàÎã§.',
  },
];

type TeacherMood = 'idle' | 'correct' | 'incorrect';

const renderSampleBack = (sample: SampleCardConfig, cardStyle?: CardStyle | null) => {
  const { correct, explanation } = sample;
  const resultLabel = correct ? 'üéâ Ï†ïÎãµÏûÖÎãàÎã§!' : '‚ùå ÌãÄÎ†∏ÏäµÎãàÎã§.';
  const explanationText = explanation ?? 'Îã§Ïùå Î¨∏Ï†úÎ°ú Ïù¥ÎèôÌïòÏÑ∏Ïöî.';

  const resultClass = `${cardStyle?.back_title_size || 'text-sm'} ${cardStyle?.back_title_color || ''} ${cardStyle?.back_title_align || 'text-center'} ${cardStyle?.back_title_position || ''}`;
  const badgeClass = `inline-flex items-center justify-center rounded-full px-5 py-2 text-sm font-semibold ${
    correct ? 'bg-emerald-100 text-emerald-700' : 'bg-rose-100 text-rose-700'
  }`;
  const explanationClass = `${cardStyle?.back_content_size || 'text-sm'} ${cardStyle?.back_content_color || 'text-slate-700'} ${cardStyle?.back_content_align || 'text-center'} ${cardStyle?.back_content_position || ''}`;
  const explanationMarginSplit = {
    marginTop: `${cardStyle?.back_content_margin_top || '0'}px`,
    marginBottom: `${cardStyle?.back_content_margin_bottom || '0'}px`,
    marginLeft: `${cardStyle?.back_content_margin_left || '0'}px`,
    marginRight: `${cardStyle?.back_content_margin_right || '0'}px`,
  };
  const explanationMarginGeneral = {
    marginTop: `${cardStyle?.back_content_margin_top || '0'}px`,
    marginBottom:
      cardStyle?.back_layout === 'bottom'
        ? `${cardStyle?.back_title_margin_bottom || '16'}px`
        : `${cardStyle?.back_content_margin_bottom || '0'}px`,
    marginLeft: `${cardStyle?.back_content_margin_left || '0'}px`,
    marginRight: `${cardStyle?.back_content_margin_right || '0'}px`,
  };
  const titleMarginSplit = {
    marginTop: `${cardStyle?.back_title_margin_top || '0'}px`,
    marginBottom: `${cardStyle?.back_title_margin_bottom || '16'}px`,
    marginLeft: `${cardStyle?.back_title_margin_left || '0'}px`,
    marginRight: `${cardStyle?.back_title_margin_right || '0'}px`,
  };
  const titleMarginGeneral = {
    marginTop: `${cardStyle?.back_title_margin_top || '0'}px`,
    marginBottom:
      cardStyle?.back_layout === 'bottom'
        ? `${cardStyle?.back_title_margin_top || '0'}px`
        : `${cardStyle?.back_title_margin_bottom || '16'}px`,
    marginLeft: `${cardStyle?.back_title_margin_left || '0'}px`,
    marginRight: `${cardStyle?.back_title_margin_right || '0'}px`,
  };
  const buttonPositionClass = cardStyle?.back_button_position || '';
  const hasMtAuto = buttonPositionClass.includes('mt-auto') || buttonPositionClass.includes('my-auto');
  const hasMbAuto = buttonPositionClass.includes('mb-auto') || buttonPositionClass.includes('my-auto');
  const buttonMargin = {
    marginTop: hasMtAuto ? 'auto' : `${cardStyle?.back_button_margin_top || '0'}px`,
    marginBottom: hasMbAuto ? 'auto' : `${cardStyle?.back_button_margin_bottom || '0'}px`,
    marginLeft: `${cardStyle?.back_button_margin_left || '0'}px`,
    marginRight: `${cardStyle?.back_button_margin_right || '0'}px`,
  };
  const buttonClass = `w-full rounded-xl ${cardStyle?.back_button_size || 'px-4 py-2'} ${cardStyle?.back_button_color || 'bg-primary-600 text-white'} text-sm font-semibold shadow-lg transition hover:bg-primary-500 focus:outline-none focus:ring-2 focus:ring-primary-400 focus:ring-offset-2`;
  const buttonAlignClass = `${cardStyle?.back_button_align || 'text-center'} ${buttonPositionClass} w-full`;

  if (cardStyle?.back_layout === 'split') {
    return (
      <div className="flex h-full flex-col justify-between">
        <div style={titleMarginSplit}>
          <div className={resultClass}>
            <div className={badgeClass}>{resultLabel}</div>
          </div>
        </div>
        <div style={explanationMarginSplit}>
          <div className={explanationClass}>
            <p className="leading-relaxed">{explanationText}</p>
          </div>
        </div>
        <div style={buttonMargin}>
          <div className={buttonAlignClass}>
            <button type="button" className={buttonClass}>
              ‚û°Ô∏è Îã§Ïùå Î¨∏Ï†ú
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="flex flex-col gap-5 text-center">
      <div style={titleMarginGeneral}>
        <div className={resultClass}>
          <div className={badgeClass}>{resultLabel}</div>
        </div>
      </div>
      <div style={explanationMarginGeneral}>
        <div className={explanationClass}>
          <p className="leading-relaxed">{explanationText}</p>
        </div>
      </div>
      <div style={buttonMargin}>
        <div className={buttonAlignClass}>
          <button type="button" className={buttonClass}>
            ‚û°Ô∏è Îã§Ïùå Î¨∏Ï†ú
          </button>
        </div>
      </div>
    </div>
  );
};

export default function HomePage() {
  const { user } = useAuth();
  const initialIndex = Math.floor(Math.random() * sampleCards.length);
  const [frontIndex, setFrontIndex] = useState(initialIndex);
  const [answerIndex, setAnswerIndex] = useState(initialIndex);
  const [showAnswer, setShowAnswer] = useState(false);
  const [teacherMood, setTeacherMood] = useState<TeacherMood>('idle');
  const [fallbackHelper, setFallbackHelper] = useState<LearningHelperPublic | null>(null);
  const [cardStyle, setCardStyle] = useState<CardStyle | null>(null);

  const baseVariants = useMemo(
    () => ({
      idle: getTeacherAssetUrl(buildTeacherFilename(0)),
      correct: getTeacherAssetUrl(buildTeacherFilename(0, '_o')),
      incorrect: getTeacherAssetUrl(buildTeacherFilename(0, '_x')),
    }),
    [],
  );

  const activeHelper = user?.selected_helper ?? fallbackHelper;

  // Í∏∞Î≥∏ Ïπ¥ÎìúÎç± Ïù¥ÎØ∏ÏßÄ URL
  const cardDeckFrontImage = getCardDeckImageUrl('card_frame_front.png');
  const cardDeckBackImage = getCardDeckImageUrl('card_frame_back.png');

  const helperVariants = useMemo(() => {
    const variants = activeHelper?.variants ?? {};
    const idle = getHelperAssetUrl(variants.idle) ?? baseVariants.idle;
    const correct = getHelperAssetUrl(variants.correct) ?? idle ?? baseVariants.correct;
    const incorrect = getHelperAssetUrl(variants.incorrect) ?? idle ?? baseVariants.incorrect;
    return {
      idle,
      correct,
      incorrect,
    } as Record<TeacherMood, string>;
  }, [activeHelper, baseVariants]);

  const currentTeacherImage = helperVariants[teacherMood] ?? baseVariants.idle;

  // Í∏∞Î≥∏ Ïπ¥Îìú Ïä§ÌÉÄÏùº Î°úÎìú
  useEffect(() => {
    fetchDefaultCardStyle()
      .then(setCardStyle)
      .catch((error) => {
        console.error('Í∏∞Î≥∏ Ïπ¥Îìú Ïä§ÌÉÄÏùº Î°úÎìú Ïã§Ìå®:', error);
      });
  }, []);

  useEffect(() => {
    let cancelled = false;
    if (user?.selected_helper) {
      setFallbackHelper(null);
      return () => {
        cancelled = true;
      };
    }
    fetchLearningHelpers()
      .then((items) => {
        if (cancelled) return;
        const defaultHelper =
          items.find((item) => item.level_requirement === 1) ?? items.find((item) => item.unlocked) ?? items[0] ?? null;
        setFallbackHelper(defaultHelper ?? null);
      })
      .catch((error: any) => {
        if (cancelled) return;
        console.error('ÌïôÏäµ ÎèÑÏö∞ÎØ∏ Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§.', error);
        setFallbackHelper(null);
      });
    return () => {
      cancelled = true;
    };
  }, [user?.selected_helper_id, user?.selected_helper]);

  useEffect(() => {
    const timeout = window.setTimeout(() => {
      if (showAnswer) {
        setShowAnswer(false);
        setTeacherMood('idle');
        setFrontIndex((prev) => {
          if (sampleCards.length <= 1) {
            return prev;
          }
          let next = Math.floor(Math.random() * sampleCards.length);
          if (next === prev) {
            next = (next + 1) % sampleCards.length;
          }
          return next;
        });
      } else {
        setAnswerIndex(frontIndex);
        setShowAnswer(true);
      }
    }, showAnswer ? 4000 : 6000);

    return () => window.clearTimeout(timeout);
  }, [showAnswer, frontIndex]);

  useEffect(() => {
    if (showAnswer) {
      const isCorrect = sampleCards[answerIndex]?.correct ?? false;
      setTeacherMood(isCorrect ? 'correct' : 'incorrect');
    } else {
      setTeacherMood('idle');
    }
  }, [showAnswer, answerIndex]);

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-blue-50">
      <section className="w-full py-12">
        <div className="container mx-auto px-4">
          <h1 className="text-4xl md:text-5xl lg:text-6xl font-bold text-center text-primary-600">HiStudyCard</h1>
          <p className="mt-4 text-lg md:text-xl text-center text-slate-600">ÌïúÍµ≠ÏÇ¨ ÌïôÏäµÏùÑ ÏúÑÌïú Ïä§ÎßàÌä∏ Ïπ¥Îìú ÏãúÏä§ÌÖú</p>
        </div>
      </section>

      <main className="container mx-auto px-4 py-12">
        <div className="flex flex-col items-center justify-center space-y-12">
          <div className="relative w-full max-w-5xl rounded-[40px] bg-white p-8 shadow-[0_32px_60px_-28px_rgba(30,41,59,0.35)]">
            <div className="flex flex-col gap-10 lg:flex-row lg:items-center">
              <div className="relative flex-[0_0_50%]">
                <img src={currentTeacherImage} alt="Teacher" className="w-full h-auto object-contain" />
              </div>
              <div className="relative flex-1">
                <div className="relative w-full max-w-sm lg:ml-auto" style={{ perspective: '1500px' }}>
                  <div
                    className={`relative aspect-[3/5] w-full transform transition-transform duration-700 ease-in-out [transform-style:preserve-3d] ${
                      showAnswer ? '[transform:rotateY(180deg)]' : ''
                    }`}
                  >
                    <div
                      className="absolute inset-0 overflow-hidden rounded-[36px] border border-slate-200 shadow-[0_28px_60px_-20px_rgba(30,41,59,0.45)] [backface-visibility:hidden]"
                      style={{
                        ...(cardDeckFrontImage) 
                          ? {
                              backgroundImage: `url(${cardDeckFrontImage})`,
                              backgroundSize: 'cover',
                              backgroundPosition: 'center',
                            }
                          : {
                              backgroundColor: '#f8fafc',
                            }
                      }}
                    >
                      <div className="absolute inset-0 bg-white/55" />
                      <div className="absolute inset-0 flex h-full flex-col items-stretch justify-center gap-6 rounded-[28px] bg-white/92 p-6">
                        <div className="max-h-full overflow-y-auto text-slate-900">
                          <div className="pointer-events-none select-none">
                            <CardRunner
                              card={sampleCards[frontIndex].card}
                              disabled={false}
                              onSubmit={() => {}}
                              cardStyle={cardStyle}
                            />
                          </div>
                        </div>
                      </div>
                    </div>
                    <div
                      className="absolute inset-0 overflow-hidden rounded-[36px] border border-slate-200 shadow-[0_28px_60px_-20px_rgba(30,41,59,0.45)] [backface-visibility:hidden] [transform:rotateY(180deg)]"
                      style={{
                        ...(cardDeckBackImage) 
                          ? {
                              backgroundImage: `url(${cardDeckBackImage})`,
                              backgroundSize: 'cover',
                              backgroundPosition: 'center',
                            }
                          : {
                              backgroundColor: '#f8fafc',
                            }
                      }}
                    >
                      <div className="absolute inset-0 bg-white/55" />
                      <div
                        className={`absolute inset-0 flex h-full flex-col rounded-[36px] bg-white/94 p-6 ${
                          cardStyle?.back_layout === 'top'
                            ? 'justify-start'
                            : cardStyle?.back_layout === 'center'
                            ? 'justify-center'
                            : cardStyle?.back_layout === 'bottom'
                            ? 'justify-end'
                            : cardStyle?.back_layout === 'split'
                            ? 'justify-between'
                            : 'items-center justify-center'
                        }`}
                      >
                        {renderSampleBack(sampleCards[answerIndex], cardStyle)}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div className="text-center max-w-2xl space-y-6">
            <h2 className="text-2xl md:text-3xl font-semibold text-slate-800">Ìö®Ïú®Ï†ÅÏù∏ ÌïúÍµ≠ÏÇ¨ ÌïôÏäµÏùò ÏãúÏûë</h2>
            <p className="text-lg text-slate-600 leading-relaxed">
              AI Í∏∞Î∞ò ÌÄ¥Ï¶à ÏÉùÏÑ±Í≥º Ï≤¥Í≥ÑÏ†ÅÏù∏ ÌïôÏäµ Í¥ÄÎ¶¨Î°ú ÌïúÍµ≠ÏÇ¨Î•º Îçî ÏâΩÍ≥† Ïû¨ÎØ∏ÏûàÍ≤å Í≥µÎ∂ÄÌïòÏÑ∏Ïöî.
            </p>
          </div>
        
        </div>
      </main>

      <footer className="w-full py-8 mt-16 border-t border-slate-200">
        <div className="container mx-auto px-4 text-center">
          <p className="text-slate-500">¬© {new Date().getFullYear()} HiStudyCard.</p>
        </div>
      </footer>
    </div>
  );
}
